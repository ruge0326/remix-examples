{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "/Users/ru/Documents/git/RUBENABIX/remix-examples/remix-cook-book/app/root.tsx", "/Users/ru/Documents/git/RUBENABIX/remix-examples/remix-cook-book/app/routes/profile1.tsx", "/Users/ru/Documents/git/RUBENABIX/remix-examples/remix-cook-book/app/routes/profile2.tsx", "/Users/ru/Documents/git/RUBENABIX/remix-examples/remix-cook-book/app/routes/search.tsx", "/Users/ru/Documents/git/RUBENABIX/remix-examples/remix-cook-book/app/routes/wallet.tsx", "/Users/ru/Documents/git/RUBENABIX/remix-examples/remix-cook-book/app/routes/index.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import type { MetaFunction } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"New Remix App\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n", "// import { withZod } from '@remix-validated-form/with-zod'\n// import { prisma } from '~/library'\n// import alertPage from '~/styles/Pages/StaticPages/AlertPage/index.css'\n// import { auth } from '~/auth.server'\n// import {\n//   ActionFunction,\n//   json,\n//   LinksFunction,\n//   LoaderFunction,\n//   redirect,\n//   unstable_parseMultipartFormData,\n//   UploadHandler,\n//   useActionData,\n//   useLoaderData,\n// } from 'remix'\n// import { useIsSubmitting, useIsValid, ValidatedForm, validationError } from 'remix-validated-form'\n// import { z } from 'zod'\n// import classnames from 'classnames'\n// import { copyToClipboard, getBase64 } from '~/library'\n// import React from 'react'\n// import { Button, Col, Container, Form, Image, Row } from 'react-bootstrap'\n// import OverlayTrigger from 'react-bootstrap/OverlayTrigger'\n// import Tooltip from 'react-bootstrap/Tooltip'\n// import { Input } from '~/components/Form/Input'\n// import { MAX_FIRST_NAME, MIN_FIRST_NAME } from '~/constants/commons'\n// import { uploadStreamToCloudinary } from '~/utils.server'\n// import { AlertPage } from '~/components/Pages/StaticPages/AlertPage/AlertPage'\n\n// export const links: LinksFunction = () => {\n//   return [\n//     {\n//       rel: 'stylesheet',\n//       href: alertPage,\n//     },\n//   ]\n// }\n\n// type ProfileFormData = {\n//   email: string\n//   username: string\n//   twitter: string\n//   avatar: string\n//   address: string\n// }\n\n// export const validator = withZod(\n//   z.object({\n//     username: z\n//       .string()\n//       .nonempty('Username is required')\n//       .min(MIN_FIRST_NAME, 'UserName  must be at least 2 characters')\n//       .max(MAX_FIRST_NAME, 'UserName  length must not exceed 20 characters'),\n//     twitter: z.string(),\n//     avatar: z.any(),\n//     email: z.string().nonempty('Email is required').email('Must be a valid email'),\n//   }),\n// )\n\n// export const loader: LoaderFunction = async ({ request }) => {\n//   const user = await auth.isAuthenticated(request)\n//   if (!user) {\n//     return redirect('sign-in?redirect_to=profile')\n//   }\n//   const profile = await prisma.accounts.findFirst({\n//     where: {\n//       address: user.address,\n//     },\n//   })\n//   return json({ ...profile })\n// }\n\n// const uploadHandler: UploadHandler = async ({ name, stream, filename, mimetype }) => {\n//   try {\n//     if (name !== 'avatar' || !filename || !mimetype) {\n//       stream.resume()\n//       return\n//     }\n//     const uploadedImage = await uploadStreamToCloudinary(stream, {\n//       public_id: new Date().getTime().toString(),\n//       folder: '/raremint',\n//     })\n//     if (uploadedImage) return uploadedImage.secure_url\n//   } catch (error) {\n//     stream.resume()\n//   }\n// }\n\n// export const action: ActionFunction = async ({ request }) => {\n//   try {\n//     const formData = await unstable_parseMultipartFormData(request, uploadHandler)\n//     const data = await validator.validate(formData)\n//     if (data.error) return validationError(data.error)\n//     const { username, twitter, email, avatar } = data.data\n//     const profile = await prisma.accounts.update({\n//       where: {\n//         address,\n//       },\n//       data: avatar ? { username, twitter, email, avatar } : { username, twitter, email },\n//     })\n//     return json(profile)\n//   } catch (error) {\n//     return json({\n//       error,\n//     })\n//   }\n// }\n\n// function ProfilePage() {\n//   const refFile = React.useRef<HTMLInputElement>(null)\n//   const data = useActionData<ProfileFormData>()\n//   const profile = useLoaderData<ProfileFormData>()\n//   const [image, setImage] = React.useState<string>('')\n//   const [isEdit, setIsEdit] = React.useState<boolean>(false)\n//   const isSubmitting = useIsSubmitting('profile-form')\n//   const isValid = useIsValid('profile-form')\n\n//   const renderTooltip = (props: any) => <Tooltip {...props}>Copied address!</Tooltip>\n//   const handelCopy = () => {\n//     copyToClipboard(data?.address || '')\n//   }\n\n//   const handelUpload = () => {\n//     if (refFile.current) {\n//       refFile.current.click()\n//     }\n//   }\n\n//   const handleChangeFile = async (e: any) => {\n//     try {\n//       const image = await getBase64(e.target.files[0])\n//       setImage(image)\n//     } catch (error) {}\n//   }\n\n//   const avatarImage = image || data?.avatar || profile?.avatar\n\n//   const currentProfile = {\n//     ...profile,\n//     ...data,\n//   }\n\n//   React.useEffect(() => {\n//     if (data) {\n//       setIsEdit(false)\n//     }\n//   }, [data])\n\n//   return (\n//     <Container className=\"content\">\n//       <div className={classnames('mainProfile')}>\n//         <h3 className={classnames('text-center', 'titleProfile', 'mb-4', 'd-none d-lg-block')}>\n//           Profile Settings\n//         </h3>\n//         <h3 className={classnames('titleProfileMobile', 'd-lg-none')}>\n//           <span className=\"mr-2\">\n//             <Image alt=\"Profile Icon\" src=\"/images/icon/setting.svg\" width={25} height={25} />\n//           </span>{' '}\n//           Profile Settings\n//         </h3>\n//         <ValidatedForm\n//           validator={validator}\n//           method=\"post\"\n//           id=\"profile-form\"\n//           noValidate={true}\n//           encType=\"multipart/form-data\"\n//           defaultValues={currentProfile}\n//           onSubmit={(result) => {\n//             console.log('result', result)\n//             // setIsEdit(false)\n//           }}\n//           disableFocusOnError={true}\n//         >\n//           <Row className={classnames('blockProfiles', 'py-5')}>\n//             <Col xs={12} lg={4}>\n//               <h3 className={classnames('titleUpload', 'text-center')}>Upload a Photo</h3>\n//               <div className={classnames('blockAvata', 'text-center', 'mt-3')}>\n//                 <Image\n//                   className={classnames('imageAvata', {\n//                     'cursor-pointer': isEdit,\n//                   })}\n//                   alt=\"Avatar\"\n//                   onClick={handelUpload}\n//                   src={avatarImage || '/images/photo-upload.png'}\n//                 />\n//                 <Image\n//                   className={classnames('imageAvataItem', 'cursor-pointer', isEdit && 'cursor')}\n//                   alt=\"Edit Avatar Icon\"\n//                   onClick={handelUpload}\n//                   src={avatarImage ? '/images/edit-avata.png' : '/images/upload-picture-1.png'}\n//                 />\n//               </div>\n//               {isEdit && (\n//                 <input\n//                   name=\"avatar\"\n//                   type=\"file\"\n//                   className=\"d-none\"\n//                   ref={refFile}\n//                   onChange={handleChangeFile}\n//                 />\n//               )}\n//             </Col>\n//             <Col xs={12} lg={8}>\n//               <div className={classnames('mr-auto', 'blockForm')}>\n//                 <Form.Group className=\"mb-4\">\n//                   {!isEdit ? (\n//                     <>\n//                       <Form.Label>Username*</Form.Label>\n//                       <Form.Label className=\"formValue\">\n//                         {currentProfile.username || 'n/a'}\n//                       </Form.Label>\n//                     </>\n//                   ) : (\n//                     <Input name=\"username\" label=\"Username\" />\n//                   )}\n//                 </Form.Group>\n//                 <Form.Group className=\"mb-4\">\n//                   {!isEdit ? (\n//                     <>\n//                       <Form.Label>Email Address*</Form.Label>\n//                       <Form.Label className=\"formValue\">{currentProfile.email || 'n/a'}</Form.Label>\n//                     </>\n//                   ) : (\n//                     <Input name=\"email\" label=\"Email Address\" />\n//                   )}\n//                 </Form.Group>\n//                 <Form.Group className=\"mb-4\">\n//                   <Form.Label className=\"position-relative\">\n//                     Twitter Handle{' '}\n//                     <Image\n//                       alt=\"Twitter Icon\"\n//                       src=\"/images/twitter.png\"\n//                       width={33}\n//                       height={27}\n//                       className=\"twitterIcon\"\n//                     />\n//                   </Form.Label>\n//                   {!isEdit ? (\n//                     <>\n//                       <Form.Label className=\"formValue\">\n//                         {currentProfile.twitter || 'n/a'}\n//                       </Form.Label>\n//                     </>\n//                   ) : (\n//                     <Input name=\"twitter\" />\n//                   )}\n//                 </Form.Group>\n//                 <Form.Group className=\"mb-4 position-relative\">\n//                   <Form.Label>Wallet Address</Form.Label>\n//                   <div className=\"position-relative\">\n//                     <Form.Control\n//                       className=\"walletAddressInput\"\n//                       readOnly\n//                       value={data?.address || profile.address}\n//                     />\n\n//                     <OverlayTrigger\n//                       trigger={'click'}\n//                       placement=\"top\"\n//                       overlay={renderTooltip}\n//                       rootClose\n//                     >\n//                       <div\n//                         className={classnames('copyAddBtn', 'cursor-pointer')}\n//                         onClick={() => handelCopy()}\n//                       >\n//                         <Image\n//                           alt=\"Auction Icon\"\n//                           src=\"/images/icon/copy.svg\"\n//                           width={17}\n//                           height={21}\n//                         />\n//                       </div>\n//                     </OverlayTrigger>\n//                   </div>\n//                 </Form.Group>\n//                 <div className=\"submitBtnWrapper\">\n//                   {!isEdit ? (\n//                     <Button\n//                       variant=\"primary\"\n//                       className={'mt-4'}\n//                       type={'button'}\n//                       onClick={(e) => {\n//                         e.preventDefault()\n//                         setIsEdit(true)\n//                       }}\n//                     >\n//                       Edit Profile\n//                     </Button>\n//                   ) : (\n//                     <Button className=\"mt-4\" type=\"submit\" disabled={!isValid || isSubmitting}>\n//                       {isSubmitting ? 'Saving...' : 'Save'}\n//                     </Button>\n//                   )}\n//                 </div>\n//               </div>\n//             </Col>\n//           </Row>\n//         </ValidatedForm>\n//         <AlertPage when={isEdit} />\n//         <h3\n//           className={classnames('titleProfileMobile', 'd-lg-none')}\n//           onClick={() => {\n//             // TODO: go to SIGNIN_PAGE\n//           }}\n//         >\n//           <span className=\"mr-2\">\n//             <Image alt=\"Logout Icon\" src=\"/images/icon/logout.svg\" width={21} height={21} />\n//           </span>{' '}\n//           Log Out\n//         </h3>\n//       </div>\n//     </Container>\n//   )\n// }\n\n// export default ProfilePage\n\nexport default {};\n", "// import { attributeField, prisma, profileValidationSchema } from '~/library'\n\n// import { auth } from '~/auth.server'\n// import { ActionFunction, json, LinksFunction, LoaderFunction, redirect } from '@remix-run/node'\n// import { parseMultipartFormData } from '@remix-run/node/parseMultipartFormData'\n// import { validationError } from 'remix-validated-form'\n// import classnames from 'classnames'\n// import { copyToClipboard, getBase64 } from '~/library'\n// import React from 'react'\n// import { Button, Col, Container, Form, Image, Row } from 'react-bootstrap'\n// import OverlayTrigger from 'react-bootstrap/OverlayTrigger'\n// import Tooltip from 'react-bootstrap/Tooltip'\n// import { AlertPage } from '~/components/Pages/StaticPages/AlertPage/AlertPage'\n// import { FormProvider, useForm } from 'react-hook-form'\n// import useYupValidationResolver from '~/hooks/useYupValidationResolver'\n// import { withYup } from '@remix-validated-form/with-yup'\n// import { useActionData, useLoaderData, useFetcher } from '@remix-run/react'\n// import { Routes } from '~/constants/routes'\n// import { uploadHandler } from '~/utils.server'\n\n// import alertPage from '~/styles/Pages/StaticPages/AlertPage/index.css'\n// import profileStyles from '~/styles/Pages/Profile/index.css'\n\n// export const links: LinksFunction = () => {\n//   return [\n//     {\n//       rel: 'stylesheet',\n//       href: profileStyles,\n//     },\n//     {\n//       rel: 'stylesheet',\n//       href: alertPage,\n//     },\n//   ]\n// }\n\n// type ProfileFormData = {\n//   email: string\n//   username: string\n//   twitter: string\n//   avatar: string\n//   address: string\n// }\n\n// export const validator = withYup(profileValidationSchema)\n\n// export const action: ActionFunction = async ({ request }) => {\n//   try {\n//     const user = await auth.isAuthenticated(request)\n//     if (!user) {\n//       const redirect_to = new URL(request.url).pathname\n//       const redirectParams = new URLSearchParams([['redirect_to', redirect_to]])\n\n//       return redirect(`${Routes.SIGNIN_PAGE}?${redirectParams}`)\n//     }\n//     console.log('request', request)\n//     const formData = await parseMultipartFormData(request, uploadHandler)\n//     console.log('formData', formData)\n//     // const data = await validator.validate(formData)\n//     // if (data.error) return validationError(data.error)\n//     // const { username, twitter, email, avatar } = data.data\n//     // const profile = await prisma.accounts.update({\n//     //   where: {\n//     //     address: user?.address,\n//     //   },\n//     //   data:\n//     //     avatar !== 'undefined'\n//     //       ? { username, twitter, email, avatar }\n//     //       : { username, twitter, email },\n//     // })\n//     return json({})\n//   } catch (error) {\n//     return json({\n//       error,\n//     })\n//   }\n// }\n\n// export const loader: LoaderFunction = async ({ request }) => {\n//   const user = await auth.isAuthenticated(request)\n//   if (!user) {\n//     return redirect('/sign-in?redirect_to=profile')\n//   }\n//   const profile = await prisma.accounts.findFirst({\n//     where: {\n//       address: user.address,\n//     },\n//   })\n//   return json({ ...profile })\n// }\n\n// function ProfilePage() {\n//   const refFile = React.useRef<HTMLInputElement>(null)\n//   const data = useActionData<ProfileFormData>()\n//   const profile = useLoaderData<ProfileFormData>()\n//   const [isEdit, setIsEdit] = React.useState<boolean>(false)\n//   const resolver = useYupValidationResolver(profileValidationSchema)\n//   const fetcher = useFetcher()\n\n//   const handelCopy = () => {\n//     alert(data?.address)\n//     console.log('data', data)\n//     copyToClipboard(data?.address || '')\n//   }\n\n//   const methods = useForm<ProfileFormData>({\n//     mode: 'all',\n//     resolver,\n//     defaultValues: profile,\n//   })\n\n//   const {\n//     handleSubmit,\n//     formState: { errors, touchedFields, isSubmitting, isValid },\n//     register,\n//     setValue,\n//     trigger,\n//     getValues,\n//   } = methods\n\n//   const onSubmit = async () => {\n//     await fetcher.submit(getValues(), {\n//       method: 'post',\n//       encType: 'multipart/form-data',\n//     })\n//     setIsEdit(false)\n//   }\n\n//   const handelUpload = () => {\n//     if (refFile.current) {\n//       !isEdit && setIsEdit(true)\n//       refFile.current.click()\n//     }\n//   }\n\n//   const handleChangeFile = async (e: any) => {\n//     const image = await getBase64(e.target.files[0])\n//     setValue('avatar', image)\n//     await trigger('avatar')\n//   }\n\n//   const renderTooltip = (props: any) => <Tooltip {...props}>Copied address!</Tooltip>\n\n//   return (\n//     <Container className=\"content\">\n//       <div className={classnames('mainProfile')}>\n//         <h3 className={classnames('text-center', 'titleProfile', 'mb-4', 'd-none d-lg-block')}>\n//           Profile Settings\n//         </h3>\n//         <h3 className={classnames('titleProfileMobile', 'd-lg-none')}>\n//           <span className=\"mr-2\">\n//             <Image alt=\"Profile Icon\" src=\"/images/icon/setting.svg\" width={25} height={25} />\n//           </span>{' '}\n//           Profile Settings\n//         </h3>\n//         <FormProvider {...methods}>\n//           <Form onSubmit={handleSubmit(onSubmit)}>\n//             <Row className={classnames('blockProfiles', 'py-5')}>\n//               <Col xs={12} lg={4}>\n//                 <h3 className={classnames('titleUpload', 'text-center')}> Upload a Photo</h3>\n//                 <div className={classnames('blockAvata', 'text-center', 'mt-3')}>\n//                   <Image\n//                     className={classnames('imageAvata', {\n//                       'cursor-pointer': isEdit,\n//                     })}\n//                     alt=\"Avatar\"\n//                     onClick={handelUpload}\n//                     src={getValues().avatar || '/images/photo-upload.png'}\n//                   />\n//                   <Image\n//                     className={classnames('imageAvataItem', 'cursor-pointer', isEdit && 'cursor')}\n//                     alt=\"Edit Avatar Icon\"\n//                     onClick={handelUpload}\n//                     src={\n//                       getValues().avatar ? '/images/edit-avata.png' : '/images/upload-picture-1.png'\n//                     }\n//                   />\n//                 </div>\n//                 <input\n//                   type={'file'}\n//                   className={'d-none'}\n//                   {...register('avatar')}\n//                   ref={refFile}\n//                   onChange={handleChangeFile}\n//                 />\n//               </Col>\n//               <Col xs={12} lg={8}>\n//                 <div className={classnames('mr-auto', 'blockForm')}>\n//                   <Form.Group className=\"mb-4\">\n//                     <Form.Label>Username*</Form.Label>\n//                     {!isEdit ? (\n//                       <Form.Label className=\"formValue\">{getValues().username || 'n/a'}</Form.Label>\n//                     ) : (\n//                       <>\n//                         <Form.Control\n//                           className={`form-field`}\n//                           {...register('username')}\n//                           {...attributeField('isInvalid', errors.username, true)}\n//                           isValid={!errors.username}\n//                         />\n//                         <Form.Control.Feedback type=\"invalid\">\n//                           {errors.username?.message}\n//                         </Form.Control.Feedback>\n//                       </>\n//                     )}\n//                   </Form.Group>\n//                   <Form.Group className=\"mb-4\">\n//                     <Form.Label>Email Address*</Form.Label>\n//                     {!isEdit ? (\n//                       <Form.Label className=\"formValue\">{getValues().email || 'n/a'}</Form.Label>\n//                     ) : (\n//                       <>\n//                         <Form.Control\n//                           className={`form-field`}\n//                           {...register('email')}\n//                           {...attributeField('isInvalid', errors.email, true)}\n//                           isValid={!errors.email}\n//                         />\n//                         <Form.Control.Feedback type=\"invalid\">\n//                           {errors.email?.message}\n//                         </Form.Control.Feedback>\n//                       </>\n//                     )}\n//                   </Form.Group>\n//                   <Form.Group className=\"mb-4\">\n//                     <Form.Label className=\"position-relative\">\n//                       Twitter Handle{' '}\n//                       <Image\n//                         alt=\"Twitter Icon\"\n//                         src=\"/images/twitter.png\"\n//                         width={33}\n//                         height={27}\n//                         className=\"twitterIcon\"\n//                       />\n//                     </Form.Label>\n//                     {!isEdit ? (\n//                       <Form.Label className=\"formValue\">{getValues().twitter || 'n/a'}</Form.Label>\n//                     ) : (\n//                       <>\n//                         <Form.Control\n//                           className={`form-field`}\n//                           {...register('twitter')}\n//                           {...attributeField('isInvalid', errors.twitter, touchedFields.twitter)}\n//                           {...attributeField('isValid', errors.twitter, touchedFields.twitter)}\n//                         />\n//                         <Form.Control.Feedback type=\"invalid\">\n//                           {errors.twitter?.message}\n//                         </Form.Control.Feedback>\n//                       </>\n//                     )}\n//                   </Form.Group>\n//                   <Form.Group className=\"mb-4 position-relative\">\n//                     <Form.Label>Wallet Address</Form.Label>\n//                     <div className=\"position-relative\">\n//                       <Form.Control\n//                         className=\"walletAddressInput\"\n//                         value={profile.address}\n//                         readOnly\n//                       />\n\n//                       <OverlayTrigger\n//                         trigger={'click'}\n//                         placement=\"top\"\n//                         overlay={renderTooltip}\n//                         rootClose\n//                       >\n//                         <div\n//                           className={classnames('copyAddBtn', 'cursor-pointer')}\n//                           onClick={() => handelCopy()}\n//                         >\n//                           <Image\n//                             alt=\"Auction Icon\"\n//                             src=\"/images/icon/copy.svg\"\n//                             width={17}\n//                             height={21}\n//                           />\n//                         </div>\n//                       </OverlayTrigger>\n//                     </div>\n//                   </Form.Group>\n//                   <div className=\"submitBtnWrapper\">\n//                     {!isEdit ? (\n//                       <Button\n//                         disabled={isSubmitting || fetcher.state === 'submitting'}\n//                         variant=\"primary\"\n//                         className=\"mt-4\"\n//                         type=\"button\"\n//                         onClick={(e) => {\n//                           e.preventDefault()\n//                           setIsEdit(true)\n//                         }}\n//                       >\n//                         Edit Profile\n//                       </Button>\n//                     ) : (\n//                       <Button\n//                         variant=\"primary\"\n//                         className=\"mt-4\"\n//                         type=\"button\"\n//                         onClick={() => onSubmit()}\n//                         disabled={!isValid || isSubmitting || fetcher.state === 'submitting'}\n//                       >\n//                         Save\n//                       </Button>\n//                     )}\n//                   </div>\n//                 </div>\n//               </Col>\n//             </Row>\n//           </Form>\n//         </FormProvider>\n//         <AlertPage when={isEdit} />\n//       </div>\n//     </Container>\n//   )\n// }\n\n// export default ProfilePage\n\nexport default {};\n", "export default function Search() {\n  return (\n    <>\n      <h1>Search</h1>\n      <form method=\"get\" action=\"search\">\n        <label>\n          Search <input name=\"term\" type=\"text\" />\n        </label>\n        <button type=\"submit\">Search</button>\n      </form>\n    </>\n  );\n}\n", "import {\n  Web3ReactProvider,\n  useWeb3React,\n  UnsupportedChainIdError,\n} from \"@web3-react/core\";\nimport { Web3Provider } from \"@ethersproject/providers\";\n\nimport React, { useEffect } from \"react\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\nimport { Buffer } from \"./../libs/wallet.client\";\n\nexport const Content = function () {\n  const web3React = useWeb3React();\n\n  console.log(\"web3React\", web3React);\n\n  useEffect(() => {\n    const walletconnect = new WalletConnectConnector({\n      infuraId: \"a5fc4506ae1e4400b52b814f9faad4ad\",\n      bridge: \"https://bridge.walletconnect.org\",\n      qrcode: true,\n    });\n\n    web3React.activate(walletconnect);\n    console.log(\"run\");\n  }, []);\n\n  useEffect(() => {\n    console.log(\"new chain id \", web3React.chainId);\n  }, [web3React.chainId]);\n\n  useEffect(() => {\n    console.log(\"new account \", web3React.account);\n\n    if (web3React.account) {\n      web3React.library\n        .getSigner(web3React.account)\n        .signMessage(\"\uD83D\uDC4B\")\n        .then((signature: any) => {\n          window.alert(`Success!\\n\\n${signature}`);\n        });\n    }\n  }, [web3React.account]);\n\n  return (\n    <div className=\"App\">\n      <h1>Hello CodeSandbox</h1>\n      <h2>Start editing to see some magic happen!</h2>\n    </div>\n  );\n};\n\nfunction getLibrary(provider: any) {\n  const library = new Web3Provider(provider);\n  library.pollingInterval = 12000;\n  return library;\n}\n\nexport default function App() {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <Content />\n    </Web3ReactProvider>\n  );\n}\n", "export default function Index() {\n  return (\n    <div style={{ fontFamily: \"system-ui, sans-serif\", lineHeight: \"1.4\" }}>\n      <h1>Welcome to Remix</h1>\n      <ul>\n        <li>\n          <a\n            target=\"_blank\"\n            href=\"https://remix.run/tutorials/blog\"\n            rel=\"noreferrer\"\n          >\n            15m Quickstart Blog Tutorial\n          </a>\n        </li>\n        <li>\n          <a\n            target=\"_blank\"\n            href=\"https://remix.run/tutorials/jokes\"\n            rel=\"noreferrer\"\n          >\n            Deep Dive Jokes App Tutorial\n          </a>\n        </li>\n        <li>\n          <a target=\"_blank\" href=\"https://remix.run/docs\" rel=\"noreferrer\">\n            Remix Docs\n          </a>\n        </li>\n      </ul>\n    </div>\n  );\n}\n", "export default {'version':'1ffe042c','entry':{'module':'/build/entry.client-4GC3F3WB.js','imports':['/build/_shared/chunk-537OS7OQ.js','/build/_shared/chunk-7GBHLDOU.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-XI4XHAJZ.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-L7TQ6R44.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/profile1':{'id':'routes/profile1','parentId':'root','path':'profile1','index':undefined,'caseSensitive':undefined,'module':'/build/routes/profile1-62UOAVK2.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/profile2':{'id':'routes/profile2','parentId':'root','path':'profile2','index':undefined,'caseSensitive':undefined,'module':'/build/routes/profile2-YCY4BWTB.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/search':{'id':'routes/search','parentId':'root','path':'search','index':undefined,'caseSensitive':undefined,'module':'/build/routes/search-WZJZX6DZ.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/wallet':{'id':'routes/wallet','parentId':'root','path':'wallet','index':undefined,'caseSensitive':undefined,'module':'/build/routes/wallet-KIJRBIYY.js','imports':['/build/_shared/chunk-QW5LWUB5.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-1FFE042C.js'};", "\nimport * as entryServer from \"/Users/ru/Documents/git/RUBENABIX/remix-examples/remix-cook-book/app/entry.server.tsx\";\nimport * as route0 from \"/Users/ru/Documents/git/RUBENABIX/remix-examples/remix-cook-book/app/root.tsx\";\nimport * as route1 from \"/Users/ru/Documents/git/RUBENABIX/remix-examples/remix-cook-book/app/routes/profile1.tsx\";\nimport * as route2 from \"/Users/ru/Documents/git/RUBENABIX/remix-examples/remix-cook-book/app/routes/profile2.tsx\";\nimport * as route3 from \"/Users/ru/Documents/git/RUBENABIX/remix-examples/remix-cook-book/app/routes/search.tsx\";\nimport * as route4 from \"/Users/ru/Documents/git/RUBENABIX/remix-examples/remix-cook-book/app/routes/wallet.tsx\";\nimport * as route5 from \"/Users/ru/Documents/git/RUBENABIX/remix-examples/remix-cook-book/app/routes/index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/profile1\": {\n      id: \"routes/profile1\",\n      parentId: \"root\",\n      path: \"profile1\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/profile2\": {\n      id: \"routes/profile2\",\n      parentId: \"root\",\n      path: \"profile2\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/search\": {\n      id: \"routes/search\",\n      parentId: \"root\",\n      path: \"search\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/wallet\": {\n      id: \"routes/wallet\",\n      parentId: \"root\",\n      path: \"wallet\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route5\n    }\n  };"],
  "mappings": "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",
  "names": []
}
